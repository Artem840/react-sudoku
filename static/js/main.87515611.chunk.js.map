{"version":3,"sources":["reducers/actions.ts","utils/check-grid/index.ts","utils/compare-array/index.ts","utils/copy-grid/index.ts","utils/create-full-grid/index.ts","utils/fill-grid/index.ts","utils/get-random-index/index.ts","utils/identify-square/index.ts","utils/is-in/col/index.ts","utils/is-in/row/index.ts","utils/is-in/square/index.ts","global/index.ts","utils/remove-numbers/index.ts","utils/shuffle/index.ts","utils/solve-grid/index.ts","reducers/reducer.ts","reducers/index.ts","components/grid/block/styles/index.ts","components/grid/block/index.tsx","components/grid/styles/index.ts","components/grid/index.tsx","components/new-button/index.tsx","components/numbers/button/index.tsx","components/numbers/styles/index.ts","components/numbers/index.tsx","components/styles/button/index.ts","components/styles/content/index.ts","components/styles/title/index.ts","components/styles/card/index.ts","core/configure-store/index.ts","core/service-worker/index.ts","styles/global.ts","index.tsx","styles/theme.ts","reducers/types.ts"],"names":["createGrid","type","types","fillBlock","value","coords","selectBlock","checkGrid","grid","i","j","compareArrays","arr1","arr2","Array","isArray","length","len","copyGrid","gridCopy","r","c","createFullGrid","fillGrid","numbers","row","col","Math","floor","shuffle","isInRow","isInCol","square","identifySquare","isInSquare","getRandomIndex","random","identifyWorkingSquare","x","push","includes","counter","removeNumbers","attempts","backup","global","solveGrid","array","initialState","reducer","state","action","solvedGrid","challengeGrid","workingGrid","alert","selectedBlock","Container","styled","div","active","puzzle","theme","css","colors","blue","white","black","transition","lightBlue","Block","colIndex","rowIndex","useSelector","isActive","isPuzzle","dispatch","useDispatch","data-cy","onClick","Row","Grid","selectedValue","create","useCallback","fill","n","useMousetrap","useEffect","Children","toArray","map","_","NewButton","createNewGrid","window","confirm","Button","NumberButton","Numbers","button","Content","Title","h1","Card","persistConfig","key","storage","persistedReducer","persistReducer","configureStore","store","createStore","devToolsEnhancer","persistor","persistStore","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createGlobalStyle","background","ReactDOM","render","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","CREATE_GRID","FILL_BLOCK","SELECT_BLOCK"],"mappings":"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","file":"static/js/main.87515611.chunk.js","sourcesContent":["import { Action, AnyAction } from 'redux'\r\n\r\nimport { BLOCK_COORDS, NUMBERS } from 'typings'\r\n\r\nimport * as types from './types'\r\n\r\nexport const createGrid = (): Action => ({ type: types.CREATE_GRID })\r\n\r\nexport const fillBlock = (value: NUMBERS, coords: BLOCK_COORDS): AnyAction => ({\r\n    coords,\r\n    type: types.FILL_BLOCK,\r\n    value\r\n})\r\n\r\nexport const selectBlock = (coords: BLOCK_COORDS): AnyAction => ({\r\n    coords,\r\n    type: types.SELECT_BLOCK\r\n})","import { GRID } from 'typings'\r\n\r\n/**\r\n * A function to check if the grid is full\r\n * @param grid A 9x9 Sudoku Grid\r\n * @returns \r\n */\r\nfunction checkGrid(grid: GRID): boolean {\r\n    for(let i = 0; i < 9; i++) {\r\n        for(let j = 0; j < 9; j++) {\r\n            if (grid[i][j] === 0) {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nexport default checkGrid","/**\r\n * Compares two arrays (of any dimensions) and returns true if they are equal, other returns false\r\n * @param arr1 first array to be compared\r\n * @param arr2 second array to be compared\r\n */\r\nfunction compareArrays(arr1: any[], arr2: any[]): boolean {\r\n    if (!Array.isArray(arr1) && !Array.isArray(arr2)) {\r\n        return arr1 === arr2\r\n    }\r\n\r\n    if (arr1.length !== arr2.length) {\r\n        return false\r\n    }\r\n\r\n    for (let i = 0, len = arr1.length; i < len; i++) {\r\n        if (!compareArrays(arr1[i], arr2[i])) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nexport default compareArrays","import { GRID, INDEX } from 'typings'\r\n\r\nfunction copyGrid(grid: GRID): GRID {\r\n    const gridCopy: GRID = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n\r\n    for (let r: INDEX = 0; r < 9; r++) {\r\n        for (let c: INDEX = 0; c < 9; c++) {\r\n            gridCopy[r][c] = grid[r][c]\r\n        }\r\n    }\r\n\r\n    return gridCopy\r\n}\r\n\r\nexport default copyGrid","import { GRID } from 'typings'\r\nimport { fillGrid } from 'utils'\r\n\r\n/**\r\n * A function to create a full valid sudoku grid\r\n */\r\nfunction createFullGrid(): GRID {\r\n    const grid: GRID = [\r\n        [0, 4, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 3, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 2, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 6],\r\n        [0, 5, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n\r\n    fillGrid(grid)\r\n    return grid\r\n}\r\n\r\nexport default createFullGrid","import { GRID, NUMBERS } from 'typings'\r\nimport { checkGrid, identifySquare, isInRow, isInCol, isInSquare, shuffle } from 'utils'\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n/**\r\n * A backtracking/recursive function to check all the possible combination of numbers a solution is found\r\n * @param grid 9X9 Sudoku Grid\r\n */\r\n\r\n function fillGrid(grid: GRID) {\r\n    let row = 0\r\n    let col = 0\r\n  \r\n    for (let i = 0; i < 81; i++) {\r\n      row = Math.floor(i / 9)\r\n      col = i % 9\r\n  \r\n      if (grid[row][col] === 0) {\r\n        shuffle(numbers)\r\n  \r\n        for (let value of numbers) {\r\n          if (!isInRow({ grid, row, value }))\r\n            if (!isInCol({ col, grid, value })) {\r\n              const square = identifySquare({ grid, row, col })\r\n              if (!isInSquare({ square, value })) {\r\n                grid[row][col] = value\r\n                if (checkGrid(grid)) return true\r\n                else if (fillGrid(grid)) return true\r\n              }\r\n            }\r\n        }\r\n  \r\n        break\r\n      }\r\n    }\r\n  \r\n    grid[row][col] = 0\r\n  }\r\n\r\nexport default fillGrid","/**\r\n * Return a random sudokue grid index in the 0 = 8 range\r\n */\r\nfunction getRandomIndex() {\r\n    return Math.floor(Math.random() * Math.floor(9))\r\n}\r\n\r\nexport default getRandomIndex","import { GRID, SQUARE } from 'typings'\r\n\r\ninterface IInput {\r\n    grid: GRID\r\n    row: number\r\n    col: number\r\n}\r\n\r\n/**\r\n * A function that identifies and returns the current sqare of a given sudoku grid at a row and column index.\r\n * @param input Object with 9x9 Sudoku Grid, row index and column index\r\n */\r\nfunction identifyWorkingSquare({ col, grid, row }: IInput): SQUARE {\r\n    const square = []\r\n    if (row < 3) {\r\n        if (col < 3) {\r\n            for (let x = 0; x < 3; x++) {\r\n                square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n            }\r\n        } else if (col < 6) {\r\n            for (let x = 0; x < 3; x++) {\r\n                square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n            }\r\n        } else {\r\n            for (let x = 0; x < 3; x++) {\r\n                square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n            }\r\n        }\r\n    } else if (row < 6) {\r\n        if (col < 3) {\r\n            for (let x = 3; x < 6; x++) {\r\n                square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n            }\r\n        } else if (col < 6) {\r\n            for (let x = 3; x < 6; x++) {\r\n                square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n            }\r\n        } else {\r\n            for (let x = 3; x < 6; x++) {\r\n                square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n            }\r\n        }\r\n    } else {\r\n        if (col < 3) {\r\n            for (let x = 6; x < 9; x++) {\r\n                square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n            }\r\n        } else if (col < 6) {\r\n            for (let x = 6; x < 9; x++) {\r\n                square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n            }\r\n        } else {\r\n            for (let x = 6; x < 9; x++) {\r\n                square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n            }\r\n        }\r\n    }\r\n\r\n    return square as SQUARE\r\n}\r\n\r\nexport default identifyWorkingSquare","import { GRID, NUMBERS } from 'typings'\r\n\r\ninterface IInput {\r\n    col: number\r\n    grid: GRID\r\n    value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid column.\r\n * @param input Object with 9x9 Sudoku Grid, column index and value\r\n */\r\nfunction isInCol({ col, grid, value }: IInput): boolean {\r\n    for (let i = 0; i < 9; i++) {\r\n        if (value === grid[i][col]) return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport default isInCol","import { GRID, NUMBERS } from 'typings'\r\n\r\ninterface IInput {\r\n    grid: GRID\r\n    row: number\r\n    value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid row.\r\n * @param input Object with 9x9 Sudoku Grid, row index and value\r\n */\r\nfunction isInRow({ grid, row, value }: IInput): boolean {\r\n    return grid[row].includes(value)\r\n}\r\n\r\nexport default isInRow","import { NUMBERS, SQUARE } from \"typings\";\r\n\r\ninterface IInput {\r\n    square: SQUARE\r\n    value: NUMBERS\r\n}\r\n\r\n/**\r\n * A function that returns true if the value is already being used in the current grid square\r\n * @param input Object with 3x3 Square and value\r\n */\r\nfunction isInSquare({ square, value }: IInput):boolean {\r\n    return [...square[0], ...square[1], ...square[2]].includes(value)\r\n}\r\n\r\nexport default isInSquare","export default {\r\n    counter: 0\r\n}","import global from 'global'\r\nimport { GRID } from 'typings'\r\nimport { copyGrid, getRandomIndex, solveGrid } from 'utils'\r\n\r\n/**\r\n * Removes numbers from a full grid to create a Sudoku Puzzle.\r\n * @param grid 9x9 Sudoku Grid\r\n * @param attempts number of attempts to solve (higher means more difficult) - default 5\r\n */\r\nfunction removeNumbers(grid: GRID, attempts = 5): GRID {\r\n    while (attempts > 0) {\r\n        let row = getRandomIndex()\r\n        let col = getRandomIndex()\r\n\r\n        while (grid[row][col] === 0) {\r\n            row = getRandomIndex()\r\n            col = getRandomIndex()\r\n        }\r\n\r\n        const backup = grid[row][col]\r\n        grid[row][col] = 0\r\n\r\n        const gridCopy = copyGrid(grid)\r\n\r\n        global.counter = 0\r\n        solveGrid(gridCopy)\r\n\r\n        if (global.counter !== 1) {\r\n            grid[row][col] = backup\r\n            attempts--\r\n        }\r\n    }\r\n    \r\n    return grid\r\n}\r\n\r\nexport default removeNumbers","/**\r\n * An array shuffling using the Fisher-Yates shuffle algorithm\r\n * @param array An array that you want shuffled\r\n */\r\n\r\nfunction shuffle(array: any[]) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1))\r\n        ;[array[i], array[j]] = [array[j], array[i]]\r\n    }\r\n}\r\n\r\nexport default shuffle","import global from \"global\"\r\nimport { GRID, NUMBERS } from 'typings'\r\nimport { checkGrid, identifySquare, isInCol, isInRow, isInSquare } from \"utils\"\r\n\r\n\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n/**\r\n * A backtracking/recursive function to check all possible combinations of numbers and until a solution is found\r\n * @param grid a 9x9 array consisting of values from 0-9\r\n */\r\nfunction solveGrid(grid: GRID) {\r\n    let row = 0\r\n    let col = 0\r\n\r\n    for (let i = 0; i < 81; i++) {\r\n        row = Math.floor(i / 9)\r\n        col = i % 9\r\n\r\n        if (grid[row][col] === 0) {\r\n            for (let value of numbers) {\r\n                if (!isInRow({ grid, row, value })) {\r\n                    if (!isInCol({ col, grid, value })) {\r\n                        const square = identifySquare({ col, grid, row })\r\n                        if (!isInSquare({ square, value })) {\r\n                            grid[row][col] = value\r\n                            if (checkGrid(grid)) {\r\n                                global.counter++\r\n                                break\r\n                            } else if (solveGrid(grid)) {\r\n                                return true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            break\r\n        }\r\n    }\r\n\r\n    grid[row][col] = 0\r\n}\r\n\r\nexport default solveGrid","import { AnyAction } from 'redux'\r\n\r\nimport { compareArrays, copyGrid, createFullGrid, removeNumbers } from 'utils'\r\nimport { GRID } from 'typings'\r\n\r\nimport { IReducer } from './interfaces'\r\nimport * as types from './types'\r\n\r\nconst initialState: IReducer = {}\r\n\r\nfunction reducer(state = initialState, action: AnyAction): IReducer {\r\n    switch(action.type) {\r\n        case types.CREATE_GRID: {\r\n            const solvedGrid = createFullGrid()\r\n            const gridCopy = copyGrid(solvedGrid)\r\n            const challengeGrid = removeNumbers(gridCopy)\r\n            const workingGrid = copyGrid(challengeGrid)\r\n            return {\r\n                ...state,\r\n                challengeGrid,\r\n                solvedGrid,\r\n                workingGrid\r\n            }\r\n        }\r\n\r\n        case types.FILL_BLOCK:\r\n            if (state.workingGrid && state.solvedGrid) {\r\n                if (state.solvedGrid[action.coords[0]][action.coords[1]] !== action.value) {\r\n                    alert('Incorrect Option!')\r\n                    return state\r\n                }\r\n                state.workingGrid[action.coords[0]][action.coords[1]] = action.value\r\n                if (compareArrays(state.workingGrid, state.solvedGrid)) {\r\n                    alert('Completed!')\r\n                }\r\n                return { ...state, workingGrid: [...state.workingGrid] as GRID }\r\n            }\r\n            return state\r\n\r\n        case types.SELECT_BLOCK:\r\n            return {...state, selectedBlock: action.coords}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import reducer from './reducer'\r\n\r\nexport * from './actions'\r\nexport * from './interfaces'\r\n\r\nexport type IReducer = ReturnType<typeof reducer>\r\nexport default reducer","import styled, { css } from 'styled-components'\r\n\r\ninterface IProps {\r\n    active?: boolean\r\n    puzzle?: boolean\r\n}\r\n\r\nexport const Container = styled.div<IProps>`\r\n    ${({ active, puzzle, theme }) => css`\r\n        align-items: center;\r\n        background-color: ${active ? theme.colors.blue : theme.colors.white};\r\n        border: 1px solid ${theme.colors.black};\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex-grow: 1;\r\n        flex-shrink: 0;\r\n        flex-basis: 0;\r\n        font-size: 20px;\r\n        font-weight: ${puzzle ? 'bold' : 'normal'};\r\n        height: auto;\r\n        justify-content: center;\r\n        transition: ${theme.transition};\r\n        user-select: none;\r\n\r\n        &:before {\r\n            padding-top: 100%;\r\n            content: '';\r\n            float: left;\r\n        }\r\n\r\n        &:hover {\r\n            background-color: ${theme.colors.lightBlue};\r\n        }\r\n    `}\r\n`","import { FC } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Dispatch, AnyAction } from 'redux'\r\n\r\nimport { IReducer, selectBlock } from 'reducers'\r\nimport { N, INDEX } from 'typings'\r\n\r\nimport { Container } from './styles'\r\n\r\ninterface IProps {\r\n    colIndex: INDEX\r\n    rowIndex: INDEX\r\n}\r\n\r\ninterface IState {\r\n    isActive: boolean\r\n    isPuzzle: boolean\r\n    value: N\r\n}\r\n\r\nconst Block: FC<IProps> = ({ colIndex, rowIndex }) => {\r\n    const state = useSelector<IReducer, IState>(({ challengeGrid, selectedBlock, workingGrid }) => ({\r\n        isActive: selectedBlock\r\n            ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex\r\n            : false,\r\n        isPuzzle: challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 ? true : false,\r\n        value: workingGrid ? workingGrid[rowIndex][colIndex] : 0\r\n    }))\r\n    const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n    function handleClick() {\r\n        if(!state.isActive) dispatch(selectBlock([rowIndex, colIndex]))\r\n    }\r\n\r\n    return (\r\n        <Container \r\n            active={state.isActive}\r\n            data-cy={`block-${rowIndex}-${colIndex}`}\r\n            onClick={handleClick}\r\n            puzzle={state.isPuzzle}\r\n        >\r\n            {state.value === 0 ? '' : state.value}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Block","import styled, { css } from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 10px 0;\r\n`\r\n\r\nexport const Row = styled.div`\r\n    ${({ theme }) => css`\r\n        display: flex;\r\n        flex-flow: row;\r\n\r\n        &:nth-child(1) {\r\n            div {\r\n                border-top: 4px solid ${theme.colors.black};\r\n            }\r\n        }\r\n        &:nth-child(3),\r\n        &:nth-child(6) {\r\n            div {\r\n                border-bottom: 3px solid ${theme.colors.black};\r\n            }\r\n        }\r\n        &:nth-child(9) {\r\n            border-bottom: 4px solid ${theme.colors.black};\r\n        }\r\n        div {\r\n            &:nth-child(1) {\r\n                border-left: 4px solid ${theme.colors.black};\r\n            }\r\n            &:nth-child(3),\r\n            &:nth-child(6),\r\n            &:nth-child(9) {\r\n                border-right: 4px solid ${theme.colors.black};\r\n            }\r\n            &:nth-child(4),\r\n            &:nth-child(7) {\r\n                border-left: none;\r\n            }\r\n        }\r\n    `}\r\n`","import { Children, FC, useCallback, useEffect } from \"react\";\r\nimport useMousetrap from 'react-hook-mousetrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AnyAction, Dispatch } from 'redux'\r\n\r\nimport { createGrid, IReducer, fillBlock, selectBlock } from 'reducers'\r\nimport { BLOCK_COORDS, GRID, INDEX, N, NUMBERS } from \"typings\"\r\n\r\nimport Block from './block'\r\nimport { Container, Row } from './styles'\r\n\r\ninterface IState {\r\n    selectedBlock?: BLOCK_COORDS\r\n    selectedValue: N\r\n    solvedGrid?: GRID\r\n}\r\n\r\nconst Grid: FC = () => {\r\n    const state = useSelector<IReducer, IState>(({ selectedBlock, solvedGrid, workingGrid }) => ({\r\n        selectedBlock,\r\n        selectedValue: workingGrid && selectedBlock ? workingGrid[selectedBlock[0]][selectedBlock[1]] : 0,\r\n        solvedGrid\r\n    }))\r\n    const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n    const create = useCallback(() => dispatch(createGrid()), [dispatch])\r\n    \r\n    const fill = useCallback((n: NUMBERS) => {\r\n        if (state.selectedBlock && state.selectedValue === 0) {\r\n            dispatch(fillBlock(n, state.selectedBlock))\r\n        }\r\n    }, [dispatch, state.selectedBlock, state.selectedValue])\r\n\r\n    function moveDown() {\r\n        if (state.selectedBlock && state.selectedBlock[0] < 8) {\r\n            dispatch(\r\n                selectBlock([\r\n                    (state.selectedBlock[0] + 1) as INDEX,\r\n                    state.selectedBlock[1]\r\n                ])\r\n            )\r\n        }\r\n    }\r\n\r\n    function moveLeft() {\r\n        if (state.selectedBlock && state.selectedBlock[1] > 0) {\r\n            dispatch(\r\n                selectBlock([\r\n                    state.selectedBlock[0],\r\n                    (state.selectedBlock[1] - 1) as INDEX\r\n                ])\r\n            )\r\n        }\r\n    }\r\n\r\n    function moveRight() {\r\n        if (state.selectedBlock && state.selectedBlock[1] < 8) {\r\n            dispatch(\r\n                selectBlock([\r\n                    state.selectedBlock[0],\r\n                    (state.selectedBlock[1] + 1) as INDEX\r\n                ])\r\n            )\r\n        }\r\n    }\r\n\r\n    function moveUp() {\r\n        if (state.selectedBlock && state.selectedBlock[0] > 0) {\r\n            dispatch(\r\n                selectBlock([\r\n                    (state.selectedBlock[0] - 1) as INDEX,\r\n                    state.selectedBlock[1]\r\n                ])\r\n            )\r\n        }\r\n    }    \r\n\r\n    useMousetrap('1', () => fill(1))\r\n    useMousetrap('2', () => fill(2))\r\n    useMousetrap('3', () => fill(3))\r\n    useMousetrap('4', () => fill(4))\r\n    useMousetrap('5', () => fill(5))\r\n    useMousetrap('6', () => fill(6))\r\n    useMousetrap('7', () => fill(7))\r\n    useMousetrap('8', () => fill(8))\r\n    useMousetrap('9', () => fill(9))\r\n    \r\n    useMousetrap('down', moveDown)\r\n    useMousetrap('left', moveLeft)\r\n    useMousetrap('right', moveRight)\r\n    useMousetrap('up', moveUp)\r\n\r\n    useEffect(() => {\r\n        if (!state.solvedGrid) {\r\n            create()\r\n        }\r\n    }, [create, state.solvedGrid])\r\n\r\n    return (\r\n        <Container data-cy=\"grid-container\">\r\n            {Children.toArray(\r\n                [...Array(9)].map((_, rowIndex) => (\r\n                    <Row data-cy=\"grid-row-container\">\r\n                        {Children.toArray(\r\n                            [...Array(9)].map((_, colIndex) => (\r\n                                <Block\r\n                                    colIndex={colIndex as INDEX}\r\n                                    rowIndex={rowIndex as INDEX} \r\n                                />\r\n                            ))\r\n                        )}\r\n                    </Row>\r\n                ))\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Grid","import { FC, useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { AnyAction, Dispatch } from 'redux'\r\n\r\nimport { Button } from 'components'\r\nimport { createGrid } from 'reducers'\r\n\r\nconst NewButton: FC = () => {\r\n    const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n    const createNewGrid = useCallback(() => {\r\n        if (window.confirm('Are you sure you want to start a new game?')) {\r\n            dispatch(createGrid())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return <Button onClick={createNewGrid}>New Game</Button>\r\n}\r\n\r\nexport default NewButton","import { FC, useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AnyAction, Dispatch }from 'redux'\r\n\r\nimport { Button } from 'components'\r\nimport { fillBlock, IReducer } from 'reducers'\r\nimport { BLOCK_COORDS, N, NUMBERS } from 'typings'\r\n\r\ninterface IProps {\r\n    value: NUMBERS\r\n}\r\n\r\ninterface IState {\r\n    selectedBlock?: BLOCK_COORDS\r\n    selectedValue: N\r\n}\r\n\r\nconst NumberButton: FC<IProps> = ({ value }) => {\r\n    const state = useSelector<IReducer, IState>(({ selectedBlock, workingGrid }) => ({\r\n        selectedBlock,\r\n        selectedValue:\r\n            workingGrid && selectedBlock ?\r\n                workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n            : 0\r\n    }))\r\n    const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n    const fill = useCallback(() => {\r\n        if (state.selectedBlock && state.selectedValue === 0) {\r\n            dispatch(fillBlock(value, state.selectedBlock))\r\n        }\r\n    }, [dispatch, state.selectedBlock, state.selectedValue, value])\r\n    \r\n    return (\r\n        <Button onClick={fill}>{value}</Button>\r\n    )\r\n}\r\n\r\nexport default NumberButton","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-flow: row;\r\n`","import { FC } from 'react'\r\n\r\nimport { NUMBERS } from 'typings'\r\n\r\nimport Button from './button'\r\nimport { Container } from './styles'\r\n\r\nconst Numbers: FC = () => (\r\n    <Container>\r\n        {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map((value) => (\r\n            <Button key={value} value={value} />\r\n        ))}\r\n    </Container>\r\n)\r\n\r\nexport default Numbers","import styled, { css } from 'styled-components'\r\n\r\nexport const Button = styled.button`\r\n    ${({ theme }) => css`\r\n        align-items: center;\r\n        background-color: ${theme.colors.black};\r\n        border: 2px solid ${theme.colors.black};\r\n        border-radius: 4px;\r\n        color: ${theme.colors.white};\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex: 1;\r\n        font-size: 16px;\r\n        font-weight: bold;\r\n        height: 40px;\r\n        justify-content: center;\r\n        margin: 4px 2px;\r\n        min-height: 40px;\r\n        opacity: 0.9;\r\n        padding: 0;\r\n        transition: ${theme.transition};\r\n\r\n        &:focus {\r\n            border-color: ${theme.colors.blue};\r\n            outline: none;\r\n        }\r\n\r\n        &:hover {\r\n            opacity: 0.6;\r\n        }\r\n    `}\r\n`","import styled from 'styled-components'\r\n\r\nexport const Content = styled.div`\r\n    max-width: 500px;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`","import styled, { css } from 'styled-components'\r\n\r\nexport const Title = styled.h1`\r\n    ${({ theme }) => css`\r\n        color: ${theme.colors.white};\r\n        margin-top: 0;\r\n        text-align: center;\r\n    `}\r\n`","import styled, { css } from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n    ${({ theme }) => css`\r\n        background-color: ${theme.colors.white};\r\n        border-radius: 15px;\r\n        display: flex;\r\n        /* flex: 1; */\r\n        flex-direction: column;\r\n        max-height: fit-content;\r\n        padding: 15px;\r\n    `}\r\n`","import { createStore } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport { devToolsEnhancer } from 'redux-devtools-extension'\r\n\r\nimport reducer from 'reducers'\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer)\r\n\r\nfunction configureStore() {\r\n    const store = createStore(persistedReducer,devToolsEnhancer({}))\r\n    const persistor = persistStore(store)\r\n    return { persistor, store }\r\n}\r\n\r\nexport default configureStore","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  type Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n  };\r\n  \r\n  export function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import { createGlobalStyle, css } from 'styled-components'\r\n\r\nexport default createGlobalStyle`\r\n    ${({ theme }) => css`\r\n        html {\r\n            height: 100%;\r\n\r\n            body {\r\n                display: flex;\r\n                flex-direction: column;\r\n                height: 100%;\r\n                margin: 0;\r\n\r\n                #root {\r\n                    background: ${theme.colors.background};\r\n                    color: ${theme.colors.black};\r\n                    display: flex;\r\n                    font-family: sans-serif;\r\n                    height: 100%;\r\n                    justify-content: center;\r\n                    padding: 15px;\r\n                }\r\n            }\r\n        }\r\n    `}\r\n`","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { ThemeProvider } from 'styled-components'\r\n\r\nimport { Card, Content, Grid, NewButton, Numbers, Title } from 'components'\r\nimport { configureStore, register } from 'core';\r\nimport { GlobalStyles, theme } from 'styles'\r\n\r\nconst { persistor, store } = configureStore()\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyles />\r\n      <Provider store={store}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n          <Content data-cy=\"content\">\r\n            <Title data-cy=\"title\">Sudoku</Title>\r\n            <Card data-cy=\"card\">\r\n              <NewButton />\r\n              <Grid />\r\n              <Numbers />\r\n            </Card>\r\n          </Content>\r\n        </PersistGate>\r\n      </Provider>\r\n    </ThemeProvider>\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nregister();\r\n","export default {\r\n    colors: {\r\n        background: 'radial-gradient(#282c34cc, #282c34)',\r\n        black: '#282c34',\r\n        blue: '#a0e9fd',\r\n        lightBlue: '#caf3fe',\r\n        white: '#fff'\r\n    },\r\n    transition: '0.3s',\r\n}","export const CREATE_GRID = 'CREATE_GRID'\r\nexport const FILL_BLOCK = 'FILL_BLOCK'\r\nexport const SELECT_BLOCK = 'SELECT_BLOCK'"],"sourceRoot":""}